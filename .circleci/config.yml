version: 2.1

jobs:
    build:
        working_directory: ~/testmonitor/eloquent-incrementable

        docker:
            - image: cimg/php:8.0-node

        steps:
            - run:
                  name: Install System Dependencies
                  command: |
                      sudo apt-get update
                      sudo apt-get install -y libsqlite3-dev php8.0-sqlite3
            - run: sudo apt update && sudo apt install zlib1g-dev libsqlite3-dev

#            - run:
#                  name: Install PHP Extensions
#                  command: |
#                      sudo docker-php-ext-install -j$(nproc) pdo_mysql pdo_sqlite
#                      sudo rm /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
            - run:
                  name: Update Composer
                  command: sudo composer self-update
            - checkout
            - run:
                  name: Install Composer Dependencies
                  command: composer install -n --ignore-platform-reqs
            - persist_to_workspace:
                  root: .
                  paths:
                      - .

    code_analysis:
        working_directory: ~/testmonitor/eloquent-incrementable

        docker:
            - image: cimg/php:8.0-node

        steps:
            - attach_workspace:
                  at: .
            - run:
                  name: PHP CS Fixer
                  command: |
                      mkdir -p ./logs/phpcsfixer
                      vendor/bin/php-cs-fixer fix --config=.php-cs-fixer.php --diff --dry-run --format=junit > logs/phpcsfixer/junit.xml
            - run:
                  name: PHPCS
                  command: |
                      mkdir -p ./logs/phpcs
                      vendor/bin/phpcs --standard="PSR1,PSR2" -v --report=junit --report-file=logs/phpcs/junit.xml src/

            - store_artifacts:
                  path: ./logs/phpcsfixer
                  destination: phpcsfixer
            - store_artifacts:
                  path: ./logs/phpcs
                  destination: phpcs
            - store_test_results:
                  path: ./logs

    unit_test:
        working_directory: ~/testmonitor/eloquent-incrementable

        docker:
            - image: cimg/php:8.0-node
              environment:
                  APP_ENV: testing
            - image: circleci/mysql:8.0
              command: [--default-authentication-plugin=mysql_native_password]
              environment:
                  - MYSQL_ALLOW_EMPTY_PASSWORD=true
                  - MYSQL_ROOT_PASSWORD=ubuntu
                  - MYSQL_USER=ubuntu
                  - MYSQL_PASSWORD=ubuntu
                  - MYSQL_DATABASE=circle_test

        steps:
            -   run:
                    name: Install PHP Extensions
                    command: |
                        sudo apt-get update
                        sudo apt-get install -y php8.0-common php8.0-redis
                        echo "opcache.enable_cli=1" | sudo tee -a /etc/php/8.0/cli/conf.d/10-opcache.ini > /dev/null
            -   run:
                    name: Setup MySQL
                    command: |
                        sudo apt-get install -y default-mysql-client
                        mysql -h 127.0.0.1 -u root -pubuntu --execute="GRANT ALL PRIVILEGES ON *.* TO 'ubuntu'@'%' WITH GRANT OPTION;"
                        mysql -h 127.0.0.1 -u root -pubuntu --execute="FLUSH PRIVILEGES;"

            - attach_workspace:
                  at: .
            - run:
                  name: Run Unit Tests
                  command: |
                      mkdir -p ./logs/phpunit
                      vendor/bin/phpunit -d memory_limit=1G --printer "\PHPUnit\TextUI\DefaultResultPrinter" --log-junit logs/phpunit/junit.xml --testdox-html logs/phpunit/testdox.html

            - store_artifacts:
                  path: ./logs/phpunit
                  destination: phpunit
            - store_test_results:
                  path: ./logs

workflows:
    version: 2
    build_analyze_test:
        jobs:
            - build
            - code_analysis:
                  requires:
                      - build
            - unit_test:
                  requires:
                      - code_analysis
